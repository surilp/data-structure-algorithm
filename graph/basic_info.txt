undirected graph - edges are undirected
directed graph - directed edges


undirected graph - degree - # of edges incoming and outgoing
total degree of all nodes = number of edges * 2


Directed graph - incoming edge or outgoing edge

indegree = number of incoming edge
outdegree = number of outgoing edge


undirected graph - path - sequence of nodes/vertex where none of the nodes are visited twice
directed graph - path


undirected cyclic graph
undirected acyclic graph

directed cyclic graph
directed acyclic graph

weighted graph


bfs
dfs

visit outside of function and for adj visit inside loop


undirected cycle check - carry parent and check for cycle
directed cycle check - have visted and path visited and when visited and pathvisited try cycle
bipertite - adjacent node with different colors. Odd cycle graph cannot be bipertite. Color array color as you go
toposort - applied to DAG - directed acyclic graph- dfs and once over put that v in stack and return reversed stack
toposort bfs - indegree, queue
